import 'package:args/args.dart';
import 'package:mason_logger/mason_logger.dart';
import 'package:stmr_cli/lib.dart';

/// Runner principal do CLI
class CliRunner {
  /// Construtor que recebe o logger para output
  CliRunner(this._logger);

  final Logger _logger;

  /// Executa o CLI com os argumentos fornecidos
  Future<void> run(List<String> args) async {
    try {
      final parser = ArgParser()
        ..addFlag('help', abbr: 'h', help: 'Mostra informa√ß√µes de ajuda')
        ..addFlag('version', abbr: 'v', help: 'Mostra a vers√£o do CLI');

      final commands = <String, ICommand>{
        'create': CreateCommand(_logger),
        'feature': FeatureCommand(_logger),
        'generate': GenerateCommand(_logger),
        'upgrade': UpgradeCommand(_logger),
      };

      for (final command in commands.entries) {
        parser.addCommand(command.key, command.value.build());
      }

      ArgResults results;
      try {
        results = parser.parse(args);
      } on ArgParserException catch (e) {
        _logger.err('‚ùå ${e.message}');
        _logger.info('');
        _logger.info('Comandos dispon√≠veis:');
        for (final command in commands.keys) {
          _logger.info('  stmr $command');
        }
        _logger.info('');
        _logger.info('Use "stmr --help" para ver informa√ß√µes detalhadas.');
        return;
      }

      if (results['help'] as bool) {
        _showHelp();
        return;
      }

      if (results['version'] as bool) {
        _logger.info(PubspecUtils.getVersion());
        return;
      }

      if (results.command == null) {
        _logger.info('‚ùå Nenhum comando especificado.');
        _logger.info('');
        _logger.info('Comandos dispon√≠veis:');
        for (final command in commands.keys) {
          _logger.info('  stmr $command');
        }
        _logger.info('');
        _logger.info('Use "stmr --help" para ver informa√ß√µes detalhadas.');
        return;
      }

      final command = commands[results.command!.name];
      if (command == null) {
        _logger.err('Comando n√£o encontrado: ${results.command!.name}');
        return;
      }

      await command.run(results.command!);
    } catch (e) {
      _logger.err('Erro ao executar comando: $e');
    }
  }

  /// Exibe informa√ß√µes de ajuda detalhadas do CLI
  void _showHelp() {
    _logger.info('');
    _logger.info('üöÄ STMR CLI - Ferramenta para desenvolvimento Flutter');
    _logger.info('');
    _logger.info('Uso: stmr <comando> [argumentos]');
    _logger.info('');
    _logger.info('Op√ß√µes globais:');
    _logger.info('  -h, --help       Mostra esta ajuda');
    _logger.info('  -v, --version    Mostra a vers√£o do CLI');
    _logger.info('');
    _logger.info('Comandos dispon√≠veis:');
    _logger.info('');
    _logger.info('  üì¶ create <projeto>              Cria um novo projeto Flutter');
    _logger.info('     --name <nome>                 Nome do projeto (substitui "skeleton")');
    _logger.info('     --org <organizacao>           Organiza√ß√£o (padr√£o: tech.stmr)');
    _logger.info('');
    _logger.info('  üß© feature <modulo>              Cria um novo m√≥dulo/feature');
    _logger.info('     --path <caminho>              Caminho personalizado para o m√≥dulo');
    _logger.info('');
    _logger.info('  ‚ö° generate <tipo> <nome>        Gera componentes individuais');
    _logger.info('     page <nome>                   Gera uma p√°gina (EngineBasePage)');
    _logger.info('     controller <nome>             Gera um controlador (EngineBaseController)');
    _logger.info('     repository <nome>             Gera um reposit√≥rio (interface + implementa√ß√£o)');
    _logger.info('     dto <nome> <json>             Gera um DTO a partir de JSON');
    _logger.info('');
    _logger.info('  üîÑ upgrade                       Atualiza o CLI para a vers√£o mais recente');
    _logger.info('     --force                       For√ßa a reinstala√ß√£o mesmo se j√° atualizado');
    _logger.info('');
    _logger.info('Exemplos:');
    _logger.info('  stmr create meu_app --name "Meu App" --org com.empresa');
    _logger.info('  stmr feature auth --path lib/modules');
    _logger.info('  stmr generate page login');
    _logger.info('  stmr generate controller user');
    _logger.info('  stmr generate repository user');
    _logger.info('  stmr generate dto user \'{"name": "Jo√£o", "age": 30}\'');
    _logger.info('  stmr upgrade --force');
    _logger.info('');
    _logger.info('Para mais informa√ß√µes sobre um comando espec√≠fico:');
    _logger.info('  stmr <comando> --help');
    _logger.info('');
  }
}
